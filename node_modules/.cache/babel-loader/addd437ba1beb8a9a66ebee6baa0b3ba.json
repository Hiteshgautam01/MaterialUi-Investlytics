{"ast":null,"code":"import _regeneratorRuntime from \"/Users/precisely/Documents/investlytics-material-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSuccess),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loginError),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(checkAuthorization),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { clearToken, getToken } from '../../helpers/utility';\nimport actions from './actions';\nvar fakeApiCall = true; // auth0 or express JWT\n\nexport function loginRequest() {\n  return _regeneratorRuntime.wrap(function loginRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!fakeApiCall) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return put({\n            type: actions.LOGIN_SUCCESS,\n            payload: {\n              token: 'secret token'\n            },\n            profile: 'Profile'\n          });\n\n        case 3:\n          _context.next = 7;\n          break;\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: actions.LOGIN_ERROR\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function loginSuccess(_ref) {\n  var payload;\n  return _regeneratorRuntime.wrap(function loginSuccess$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n          _context2.next = 3;\n          return localStorage.setItem('id_token', payload.token);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function loginError() {\n  return _regeneratorRuntime.wrap(function loginError$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          clearToken();\n          _context4.next = 3;\n          return put(push('/'));\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function checkAuthorization() {\n  var token;\n  return _regeneratorRuntime.wrap(function checkAuthorization$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          token = getToken();\n\n          if (!token) {\n            _context5.next = 4;\n            break;\n          }\n\n          _context5.next = 4;\n          return put({\n            type: actions.LOGIN_SUCCESS,\n            payload: {\n              token: token\n            },\n            profile: 'Profile'\n          });\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.t0 = all;\n          _context6.next = 3;\n          return takeEvery(actions.CHECK_AUTHORIZATION, checkAuthorization);\n\n        case 3:\n          _context6.t1 = _context6.sent;\n          _context6.next = 6;\n          return takeEvery(actions.LOGIN_REQUEST, loginRequest);\n\n        case 6:\n          _context6.t2 = _context6.sent;\n          _context6.next = 9;\n          return takeEvery(actions.LOGIN_SUCCESS, loginSuccess);\n\n        case 9:\n          _context6.t3 = _context6.sent;\n          _context6.next = 12;\n          return takeEvery(actions.LOGIN_ERROR, loginError);\n\n        case 12:\n          _context6.t4 = _context6.sent;\n          _context6.next = 15;\n          return takeEvery(actions.LOGOUT, logout);\n\n        case 15:\n          _context6.t5 = _context6.sent;\n          _context6.t6 = [_context6.t1, _context6.t2, _context6.t3, _context6.t4, _context6.t5];\n          _context6.next = 19;\n          return (0, _context6.t0)(_context6.t6);\n\n        case 19:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/precisely/Documents/investlytics-material-boilerplate/src/redux/auth/saga.js"],"names":["loginRequest","loginSuccess","loginError","logout","checkAuthorization","rootSaga","all","takeEvery","put","push","clearToken","getToken","actions","fakeApiCall","type","LOGIN_SUCCESS","payload","token","profile","LOGIN_ERROR","localStorage","setItem","CHECK_AUTHORIZATION","LOGIN_REQUEST","LOGOUT"],"mappings":";;oDAOiBA,Y;qDAYAC,Y;qDAIAC,U;qDAEAC,M;qDAIAC,kB;qDAUQC,Q;;AAvCzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,oBAApC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,uBAArC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,IAAMC,WAAW,GAAG,IAApB,C,CAA0B;;AAE1B,OAAO,SAAUb,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACDa,WADC;AAAA;AAAA;AAAA;;AAAA;AAEH,iBAAML,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEF,OAAO,CAACG,aADN;AAERC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAFD;AAGRC,YAAAA,OAAO,EAAE;AAHD,WAAD,CAAT;;AAFG;AAAA;AAAA;;AAAA;AAAA;AAQH,iBAAMV,GAAG,CAAC;AAAEM,YAAAA,IAAI,EAAEF,OAAO,CAACO;AAAhB,WAAD,CAAT;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAO,SAAUlB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBe,UAAAA,OAAzB,QAAyBA,OAAzB;AAAA;AACL,iBAAMI,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,OAAO,CAACC,KAAzC,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEP,OAAO,SAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AACLO,UAAAA,UAAU;AADL;AAEL,iBAAMF,GAAG,CAACC,IAAI,CAAC,GAAD,CAAL,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUL,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACCa,UAAAA,KADD,GACSN,QAAQ,EADjB;;AAAA,eAEDM,KAFC;AAAA;AAAA;AAAA;;AAAA;AAGH,iBAAMT,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEF,OAAO,CAACG,aADN;AAERC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,KAAK,EAALA;AAAF,aAFD;AAGRC,YAAAA,OAAO,EAAE;AAHD,WAAD,CAAT;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA,yBACPC,GADO;AAAA;AAEX,iBAAMC,SAAS,CAACK,OAAO,CAACU,mBAAT,EAA8BlB,kBAA9B,CAAf;;AAFW;AAAA;AAAA;AAGX,iBAAMG,SAAS,CAACK,OAAO,CAACW,aAAT,EAAwBvB,YAAxB,CAAf;;AAHW;AAAA;AAAA;AAIX,iBAAMO,SAAS,CAACK,OAAO,CAACG,aAAT,EAAwBd,YAAxB,CAAf;;AAJW;AAAA;AAAA;AAKX,iBAAMM,SAAS,CAACK,OAAO,CAACO,WAAT,EAAsBjB,UAAtB,CAAf;;AALW;AAAA;AAAA;AAMX,iBAAMK,SAAS,CAACK,OAAO,CAACY,MAAT,EAAiBrB,MAAjB,CAAf;;AANW;AAAA;AAAA;AAAA;AACb;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { clearToken, getToken } from '../../helpers/utility';\nimport actions from './actions';\n\nconst fakeApiCall = true; // auth0 or express JWT\n\nexport function* loginRequest() {\n  if (fakeApiCall) {\n    yield put({\n      type: actions.LOGIN_SUCCESS,\n      payload: { token: 'secret token' },\n      profile: 'Profile',\n    });\n  } else {\n    yield put({ type: actions.LOGIN_ERROR });\n  }\n}\n\nexport function* loginSuccess({ payload }) {\n  yield localStorage.setItem('id_token', payload.token);\n}\n\nexport function* loginError() {}\n\nexport function* logout() {\n  clearToken();\n  yield put(push('/'));\n}\nexport function* checkAuthorization() {\n  const token = getToken();\n  if (token) {\n    yield put({\n      type: actions.LOGIN_SUCCESS,\n      payload: { token },\n      profile: 'Profile',\n    });\n  }\n}\nexport default function* rootSaga() {\n  yield all([\n    yield takeEvery(actions.CHECK_AUTHORIZATION, checkAuthorization),\n    yield takeEvery(actions.LOGIN_REQUEST, loginRequest),\n    yield takeEvery(actions.LOGIN_SUCCESS, loginSuccess),\n    yield takeEvery(actions.LOGIN_ERROR, loginError),\n    yield takeEvery(actions.LOGOUT, logout),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}